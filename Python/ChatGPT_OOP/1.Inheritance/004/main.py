"""
練習問題 4: インターフェースと抽象クラス
次の課題では、インターフェースや抽象クラスの概念を学びます。Pythonにはインターフェースの直接のサポートはありませんが、抽象基底クラス（ABC）を使うことで同様の効果を得ることができます。

問題
動物園には特定の種類の動物がいます。すべての動物は特定の行動を持っています。以下の仕様に従ってください。

新しい抽象クラス Animal を作成し、次の抽象メソッドを定義します。
speak: 鳴き声を出す
move: 移動する
info: 名前と年齢を表示する
Animal クラスを継承する Dog クラスと Cat クラスを作成し、それぞれの抽象メソッドを実装します。
動物たちの行動を確認するためのプログラムを作成します。

抽象基底クラス（ABC）の利点
インターフェースの強制:

ABCを使用することで、派生クラスが必ず特定のメソッドを実装することを強制できます。
これにより、共通のインターフェースを持つ異なるクラス間で一貫性を保つことができます。
例えば、すべての動物クラスが speak、move、info メソッドを実装していることを保証します。

設計の明確化:

抽象クラスを使うことで、クラスの設計がより明確になります。
これは特に大規模なプロジェクトやチーム開発で有用です。
設計の段階で必要なメソッドを明示的に定義できるため、コードの理解と保守が容易になります。

次の課題では、ABCを使用しない実装に戻し、より複雑な動作を追加していきましょう。

問題
動物たちに新しい属性として「体重（weight）」を追加します。
動物が食べる行動をシミュレートする eat メソッドを追加します。このメソッドは体重を増加させます。
動物が休む行動をシミュレートする rest メソッドを追加します。このメソッドは年齢を増加させます。
"""
from modules import AnimalBase, Dog, Cat

animal_list = []
animal_list.append(Dog("ポチ", 3, 15))
animal_list.append(Cat("タマ", 5, 10))
animal_list.append(Dog("ジョン", 4, 30))
animal_list.append(Cat("ミケ", 7, 5))

for animal in animal_list:
    animal.info()
    animal.speak()
    animal.move()
    animal.eat(2)
    animal.rest()
    animal.info()